#!/bin/sh
#
# Check common action syntax.
#
# Copyright (c) 2017 Nikolay Marchuk <marchuk.nikolay.a@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

. "${srcdir=.}/syntax.sh"

for arg in '' ' ' '	'\
	   not \
	   not_action \
	   notAction \
	   notaction \
	   ; do
	check_e "invalid filter action '$arg'" -e "$arg=open"
done

for arg in '' ' ' '	'; do
	check_e "invalid filter action 'not_action'" -e "$arg"not_action=
	check_e "invalid filter action 'not_action'" -e "$arg"not_action\(\)
done

for arg in not_action \
	   notAction \
	   notaction \
	   and "&&" \
	   or "||" \
	   ; do
	check_e "invalid filter action '$arg'" -e "$arg(syscall open)"
done

check_e "invalid arguments position ';':0" -e \;
check_e "invalid arguments position 'not(syscall open;)':16" -e "not(syscall open;)"
check_e "invalid arguments position 'trace((syscall open;arg))':19" \
	-e "trace((syscall open;arg))"

check_e "missing ')' in 'not (syscall open'" -e "not (syscall open"
check_e "missing ')' in 'not (syscall open\)'" -e "not (syscall open\)"
check_e "missing ')' in 'trace(syscall open'" -e "trace(syscall open"
check_e "missing ')' in 'trace(syscall open;args'" -e "trace(syscall open;args"
check_e "missing ')' in 'trace(syscall open;args\)'" -e "trace(syscall open;args\)"

check_e "unexpected ')' at '! syscall open)':14" -e "! syscall open)"
check_e "unexpected ')' at '!(syscall open))':15" -e "!(syscall open))"
check_e "unexpected ')' at 'trace(syscall open))':19" -e "trace(syscall open))"

check_e "unexpected ';' at 'trace(syscall open;arg);':23" -e "trace(syscall open;arg);"
check_e "unexpected '&' at 'trace(syscall open)&':19" -e "trace(syscall open)&"
check_e "unexpected '&' at 'trace(syscall open) &':20" -e "trace(syscall open) &"

for arg in trace \
	   read \
	   write \
	   raw \
	   abbrev \
	   verbose \
	   ; do
	cat > "$EXP" << __EOF__
$strace_exp: $arg action takes no arguments, ignored arguments 'no_args'
$strace_exp: must have PROG [ARGS] or -p PID
Try '$strace_exp -h' for more information.
__EOF__
	check_exit_status_and_stderr -e $arg=none:no_args
	check_exit_status_and_stderr -e "$arg(syscall none;no_args)"
done

cat > "$EXP" << __EOF__
$strace_exp: signal action takes no arguments, ignored arguments 'no_args'
$strace_exp: must have PROG [ARGS] or -p PID
Try '$strace_exp -h' for more information.
__EOF__
check_exit_status_and_stderr -e signal=none:no_args
